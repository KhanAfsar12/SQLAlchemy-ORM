CRUD OPERATION

# Inserting data into talble
# user = User(name="Afsar Khan", age=21)
# session.add(user)
# session.commit()
# session.close()


# Reading data
# users = session.query(User).all()
# for user in  users:
#     print(f"User Id:{user.id}  name:{user.name}  age:{user.age}")

# Updating data
# user = session.query(User).filter_by(id=2).one_or_none()
# user.name = "Abrar Khan"
# print(user.name)
# session.commit()

# delete data
# user = session.query(User).filter_by(id=4).one_or_none()
# session.delete(user)
# session.commit()



# Add random data
names = ["Ishtiyaque", "Nawaz", "Farman", "sadique"]
ages = [12,45,32,54,23,76,44,34,9]
for x in range(20):
    user = User(name=random.choice(names), age=random.choice(ages))
    session.add(user)
session.commit()



# retriving by ascending & descending
users = session.query(User).order_by(User.name, User.age).all()
for user in users:
    print(f"User age: {user.age}, name: {user.name}, id: {user.id}")


FILTERING
# Use filter() function
# users_all = session.query(User).all()
# users_filtered = (
#     session.query(User).filter(User.age > 40, User.name == 'Nawaz').all()
#     )
# print("All users: ",len(users_all))
# print("users_filtered", len(users_filtered))


# filter_by() function
# users = session.query(User).filter_by(age = 24).all()
# for user in users:
#     print(f"user age: {user.age}")


# where() function
# users = session.query(User).where(
#     or_(
#     not_(User.name=="Ishtiyaque"),
#     and_(
#         User.age > 35,
#         User.age < 60
#     )
#     )
#     ).all()
# for i in users:
#     print(f"User age:{i.age} - {i.name}")